<resources>
    <string name="app_name">OS scheduler calculator</string>
    <string name="process_schedule_algo">\nProcess Scheduling:\n\nProcess scheduling is the crucial task managed by operating systems to optimize process execution. It involves deciding which process to run, when, and for how long. Efficient scheduling ensures optimal CPU utilization and enhances system performance and responsiveness.\n\nDifferent Scheduling Algorithms:\n\n1. First Come, First Serve (FCFS):\n - Description: Processes executed in arrival order.\n - Advantages: Simple implementation.\n - Disadvantages: Poor waiting time management, convoy effect potential.\n\n------------------\n2. Shortest Job Next (SJN) / Shortest Job First (SJF):\n - Description: Shortest jobs executed first.\n - Advantages: Minimizes waiting time for small jobs.\n - Disadvantages: Difficult job length prediction, potential for starvation.\n\n------------------\n3. Priority Scheduling:\n - Description: Executes higher priority processes first.\n - Advantages: Priority-based execution.\n - Disadvantages: Potential starvation for lower priority tasks.\n\n------------------\n4. Round Robin (RR):\n - Description: Fixed time unit per process, cyclic order.\n - Advantages: Fair CPU sharing, prevents starvation.\n - Disadvantages: Inefficient for varied job times.\n\n------------------\n5. Shortest Remaining Time First (SRTF):\n - Description: Executes the process with the shortest remaining processing time next.\n - Advantages: Minimizes waiting time, optimal for non-preemptive scenarios.\n - Disadvantages: Requires accurate prediction of job durations, can lead to starvation for longer jobs.\n</string>
    <string name="types_of_schedulers">ðŸ”µ Long-Term Scheduler:\n- Role: Admits processes from new to ready state.\n- Frequency: Infrequent (seconds to minutes).\n- Goal: Controls system\'s degree of multiprogramming.\n\nðŸ”µ Short-Term Scheduler:\n- Role: Selects next process for CPU execution.\n- Frequency: Frequent (milliseconds).\n- Goal: Maximizes CPU usage and system responsiveness.\n\nðŸ”µ Medium-Term Scheduler:\n- Role: Manages swapping processes between RAM and disk.\n- Frequency: Less frequent (seconds to minutes).\n- Goal: Optimizes system performance and memory usage.\n</string>
    <string name="categories_of_scheduling">\n\nðŸ”´ Non-preemptive:\n\t\tRuns processes until completion without interruption, leading to simpler but potentially less responsive multitasking.Once a process is started it will execute until it finishes. \n\nðŸ”´ Preemptive:\n\tIn this case, Allows interruption of running processes based on priority or time quantum for efficient multitasking,Allowing process to switch betweeen. \n\n--------------------\n\n</string>
    <string name="terminologies">\nArrival Time: Arrival time is the time at which a process arrives in the ready queue, indicating when it is available for execution by the CPU.\n\nBurst Time: Burst time refers to the total time taken by a process to complete its execution, including both CPU and I/O bursts.\n\nTurnaround Time: Turnaround time is the total time taken to execute a particular process. It includes both the waiting time (the time spent in the ready queue) and the execution time.\n\nWaiting Time: Waiting time is the total time a process spends waiting in the ready queue before it gets executed by the CPU.\n\nResponse Time: Response time is the time it takes for the system to respond to a user\'s input or request for a specific process. In scheduling, it\'s the duration between submitting a request and receiving the first response. It is an essential metric for user experience and system performance evaluation.\n\nContext Switching Time: Context switching time is the time taken to save and restore the state of a process during context switching. Context switching happens when the operating system switches from running one process to another, and this time is crucial for multitasking efficiency.\n</string>
    <string name="githuburl">https://github.com/hrithik1233/os-scheduler-calculator/tree/os_sceduling</string>
    <string name="mygmail">hridikhh@gmail.com</string>
    <string name="fcfs_deiscription">FCFS, or First-Come, First-Served, is one of the simplest scheduling algorithms in which processes are executed in the order they arrive in the ready queue. The first process that arrives is the first one to be executed, and subsequent processes wait in a queue until their turn comes up.</string>
</resources>